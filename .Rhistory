#points(ccaData, display = "sites", cex=1/10)
#text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="Canonical Correspondence Analysis", ylim = c(-2,2), xlim=c(-3,3))
#points(ccaData, display = "sites", cex=1/3)
#text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="RDA: Height")#, ylim = c(-2,2), xlim=c(-3,3))
points(testDF$RDA1, testDF$RDA2, col=testDF$HeightSat, cex=2/5)
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#legend(-3,2,unique(testDF$height),col=1:length(testDF$height),pch=1)
plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="RDA: Age")#, ylim = c(-2,2), xlim=c(-3,3))
points(testDF$RDA1, testDF$RDA2, col=testDF$AgeSat, cex=2/5)
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#legend(-3,2,unique(testDF$height),col=1:length(testDF$height),pch=1)
plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="RDA: rlambda")#, ylim = c(-2,2), xlim=c(-3,3))
points(testDF$RDA1, testDF$RDA2, col=testDF$rlambdaSat, cex=2/5)
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#legend(-3,2,unique(testDF$height),col=1:length(testDF$height),pch=1)
#plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="RDA: Heal Time", ylim = c(-2,2), xlim=c(-3,3))
#points(testDF$RDA1, testDF$RDA2, col=testDF$healSat, cex=2/5)
#text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#legend(-3,2,unique(testDF$height),col=1:length(testDF$height),pch=1)
VectorStats <- envfit(ccaData ~ PSF, data = dfInput, permutations=c(10000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ PSF, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="PSF")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("PSF"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ APOPEGF, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ APOPEGF, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="APOPEGF")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("APOPEGF"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ EGF_CONS, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ EGF_CONS, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="EGF CONSUMPTION")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("EGF_CONS"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ MOVE, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ MOVE, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="MOVE")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("MOVE"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ DIVLOCPROB, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ DIVLOCPROB, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="DIVLOCPROB")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("DIVLOCPROB"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ DEATHPROB, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ DEATHPROB, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="DEATHPROB")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("DEATHPROB"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ EGF_DIFFUSION_RATE, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ EGF_DIFFUSION_RATE, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="EGFDiffusionRate")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("EGF_DIFFUSION_RATE"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ EGFDecayRate, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ EGFDecayRate, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="EGF Decay Rate")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("EGFDecayRate"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
return(ccaData)
}
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
rbPal
gradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
out <- rbPal(10)[as.numeric(cut(x,breaks = 100))]
return(out)
}
gradient(cleanDF, 0.02404)
gradient(cleanDF$rlambda, 0.02404)
gradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
out <- rbPal(100)[as.numeric(cut(x,breaks = 100))]
return(out)
}
gradient(cleanDF$rlambda, 0.02404)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
out <- rbPal(100)[as.numeric(cut(x,breaks = 100))]
return(out)
}
colorGradient(cleanDF$rlambda, 0.02404)
cleanDF$Color <- colorGradient(cleanDF$rlambda, 0.02404)
View(cleanDF)
plot(cleanDF$PSF,cleanDF$rlambda,pch = 20,col = cleanDF$Color)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
out <- rbPal(100)[as.numeric(cut(x,breaks = c(0.01,0.2,10)))]
return(out)
}
cleanDF$Color <- colorGradient(cleanDF$rlambda, 0.02404)
plot(cleanDF$PSF,cleanDF$rlambda,pch = 20,col = cleanDF$Color)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
out <- rbPal(3)[as.numeric(cut(x,breaks = c(0.01,0.2,10)))]
return(out)
}
cleanDF$Color <- colorGradient(cleanDF$rlambda, 0.02404)
plot(cleanDF$PSF,cleanDF$rlambda,pch = 20,col = cleanDF$Color)
plot(rnorm())
plot(rnorm(100))
plot(rnorm(100, mean=0.02404))
plot(rnorm(100, mean=1000))
rnorm(1000,mean=0.02404)
rnorm(100,mean=0.02404)
x = rnorm(100,mean=0.02404)
sort(x)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('red','blue','grey'))
adjust <- sort(rnorm(100,mean=target))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
return(out)
}
cleanDF$Color <- colorGradient(cleanDF$rlambda, 0.02404)
plot(cleanDF$PSF,cleanDF$rlambda,pch = 20,col = cleanDF$Color)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
adjust <- sort(rnorm(100,mean=target))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
return(out)
}
cleanDF$Color <- colorGradient(cleanDF$rlambda, 0.02404)
plot(cleanDF$PSF,cleanDF$rlambda,pch = 20,col = cleanDF$Color)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
adjust <- sort(rnorm(100,mean=target,sd=0.5))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
return(out)
}
cleanDF$Color <- colorGradient(cleanDF$rlambda, 0.02404)
plot(cleanDF$PSF,cleanDF$rlambda,pch = 20,col = cleanDF$Color)
View(cleanDF)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
adjust <- sort(rnorm(100,mean=target,sd=0.5))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- sapply(out, function(x) if(is.na(x)){return("#")}else{return(x)})
return(out)
}
cleanDF$Color <- colorGradient(cleanDF$rlambda, 0.02404)
plot(cleanDF$PSF,cleanDF$rlambda,pch = 20,col = cleanDF$Color)
View(cleanDF)
t <- subset(cleanDF, cleanDF$Color!="#")
t
subset(t, max(t$rlambda)==t$rlambda)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
adjust <- sort(rnorm(100,mean=target,sd=0.5))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
cleanDF$Color <- colorGradient(cleanDF$rlambda, 0.02404)
plot(cleanDF$PSF,cleanDF$rlambda,pch = 20,col = cleanDF$Color)
data.frame(x=rnorm(1000,mean=0.2404))
test <- data.frame(x=rnorm(1000,mean=0.2404))
test$Color <- colorGradient(test$x, 0.2404)
plot(test$x,pch = 20,col = cleanDF$Color)
plot(test$x,test$x,pch = 20,col = cleanDF$Color)
plot(qnorm(test$Color))
plot(qnorm(test$x))
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
adjust <- sort(rnorm(100,mean=target,sd=0.5))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
x <- rnorm(1000, mean=0.02404)
x <- rnorm(1000, mean=0.02404)
test <- data.frame(X=x, Color=colorGradient(x, 0.02404))
plot(test)
plot(test, color=test$Color)
plot(test, pch = 20, col=test$Color)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
adjust <- sort(rnorm(100,mean=target,sd=0.5))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
adjust <- sort(rnorm(100,mean=target,sd=0.5))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
test <- data.frame(X=x, Color=colorGradient(x, 0.02404))
plot(test, pch = 20, col=test$Color)
x <- rnorm(100, mean=0.02404)
test <- data.frame(X=x, Color=colorGradient(x, 0.02404))
plot(test, pch = 20, col=test$Color)
plot(test$X, pch = 20, col=test$Color)
library(ggplot2)
library(vegan)
gradient <- function(x, target, bins){
if(x >= target - bins & x < target + bins){y = 0}
else if(x >= target - bins*2 & x < target-bins){ y =-1}
else if(x >= target + bins & x < target + bins*2){ y = +1}
else{y=2}
return(y)
}
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
adjust <- sort(rnorm(100,mean=target,sd=0.5))
out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
getColored <- function(dfInput, dfOutcome, testDF){
outputDF <- as.data.frame(matrix(nrow=length(dfInput[,1]), ncol=4))
colnames(outputDF) <- c("HeightSat", "AgeSat", "rlambdaSat", "healSat")
for( i in 1:length(dfInput$PSF)){
dfOutcomeTest <- dfOutcome[i,]
if(gradient(dfOutcomeTest$rlambda, 0.02404, 0.004)==0){outputDF[i,3]="red"}
else if(gradient(dfOutcomeTest$rlambda, 0.02404, 0.004)==-1 || gradient(dfOutcomeTest$rlambda, 0.02404, 0.004)==+1){outputDF[i,3]="royalblue4"}
else{outputDF[i,3]="grey"}
if(gradient(dfOutcomeTest$mean, 28, 4)==0){outputDF[i,2]="red"}
else if(gradient(dfOutcomeTest$mean, 28, 4)==-1 || gradient(dfOutcomeTest$mean, 28, 4)==+1){outputDF[i,2]="royalblue4"}
else{outputDF[i,2]="grey"}
if(gradient(dfOutcomeTest$height, 14, 2)==0){outputDF[i,1]="red"}
else if(gradient(dfOutcomeTest$height, 14, 2)==-1 || gradient(dfOutcomeTest$height, 14, 2)==+1){outputDF[i,1]="royalblue4"}
else{outputDF[i,2]="grey"}
#if(gradient(dfOutcomeTest$heal, 2, 8)==0){outputDF[i,4]="red"}
#  else if(gradient(dfOutcomeTest$heal, 2, 8)==-1 || gradient(dfOutcomeTest$heal, 2, 8)==+1){outputDF[i,4]="royalblue4"}
#else{outputDF[i,4]="grey"}
}
dfOutcomeVariables <- cbind(dfOutcome, outputDF)
testDF <- cbind(testDF, dfOutcomeVariables)
return(testDF)
}
OrdiPlot <- function(df){
dfOutcome <- df[9:11]
dfOutcome$height <- as.numeric(lapply(dfOutcome$height, function(x) round(x,0)))
dfOutcome$rlambda <- as.numeric(lapply(dfOutcome$rlambda, function(x) round(x,2)))
dfOutcome$mean <- as.numeric(lapply(dfOutcome$mean, function(x) round(x,0)))
#dfOutcome$heal <- as.numeric(lapply(dfOutcome$heal, function(x) round(x,0)))
dfInput <- df[1:8]
#dfInput <- log(df[,1:6]+1)
ccaData <- rda(dfOutcome ~ PSF+EGF_CONS+APOPEGF+DEATHPROB+MOVE+DIVLOCPROB+EGF_DIFFUSION_RATE+EGFDecayRate, data=dfInput, scale=TRUE)
p <- plot(ccaData)
testDF <- as.data.frame(p$sites)
atts <- attributes(p$biplot)
xR2Vals <- as.data.frame(p$sites)
myFact = atts$arrow.mul
print(myFact)
#xLoc <- max(xR2Vals$CCA1) + 2
xLoc <- 2.2
testDF <- getColored(dfInput, dfOutcome, testDF)
plot.new()
par(mfrow=c(3,4))
#plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="Canonical Correspondence Analysis")
#points(ccaData, display = "sites", cex=1/10)
#text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="Canonical Correspondence Analysis", ylim = c(-2,2), xlim=c(-3,3))
#points(ccaData, display = "sites", cex=1/3)
#text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="RDA: Height")#, ylim = c(-2,2), xlim=c(-3,3))
points(testDF$RDA1, testDF$RDA2, col=testDF$HeightSat, cex=2/5)
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#legend(-3,2,unique(testDF$height),col=1:length(testDF$height),pch=1)
plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="RDA: Age")#, ylim = c(-2,2), xlim=c(-3,3))
points(testDF$RDA1, testDF$RDA2, col=testDF$AgeSat, cex=2/5)
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#legend(-3,2,unique(testDF$height),col=1:length(testDF$height),pch=1)
plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="RDA: rlambda")#, ylim = c(-2,2), xlim=c(-3,3))
points(testDF$RDA1, testDF$RDA2, col=testDF$rlambdaSat, cex=2/5)
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#legend(-3,2,unique(testDF$height),col=1:length(testDF$height),pch=1)
#plot(ccaData, type="n", axes = TRUE, frame.plot=TRUE, cex=2/3, main="RDA: Heal Time", ylim = c(-2,2), xlim=c(-3,3))
#points(testDF$RDA1, testDF$RDA2, col=testDF$healSat, cex=2/5)
#text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue")
#legend(-3,2,unique(testDF$height),col=1:length(testDF$height),pch=1)
VectorStats <- envfit(ccaData ~ PSF, data = dfInput, permutations=c(10000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ PSF, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="PSF")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("PSF"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ APOPEGF, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ APOPEGF, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="APOPEGF")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("APOPEGF"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ EGF_CONS, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ EGF_CONS, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="EGF CONSUMPTION")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("EGF_CONS"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ MOVE, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ MOVE, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="MOVE")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("MOVE"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ DIVLOCPROB, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ DIVLOCPROB, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="DIVLOCPROB")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("DIVLOCPROB"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ DEATHPROB, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ DEATHPROB, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="DEATHPROB")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("DEATHPROB"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ EGF_DIFFUSION_RATE, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ EGF_DIFFUSION_RATE, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="EGFDiffusionRate")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("EGF_DIFFUSION_RATE"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
VectorStats <- envfit(ccaData ~ EGFDecayRate, data = dfInput, permutations=c(1000))
print(VectorStats)
myR2 <- paste("r2 = ", round(VectorStats$vectors$r[1],4), sep="")
myPval <- paste("p-value = ", round(VectorStats$vectors$pvals[1],4), sep = "")
outText <- paste(myR2, myPval, sep="\n")
OrdiSurface <- ordisurf(ccaData ~ EGFDecayRate, data = dfInput, plot = FALSE)
plot(ccaData, type="n", axes=FALSE, frame.plot=TRUE, cex=2/3, xlab="RDA1", ylab="RDA2", main="EGF Decay Rate")
plot(OrdiSurface, add=TRUE, col="red")
text(ccaData, display="species")
text(ccaData, display = "bp", cex=2/3, axis.bp=FALSE, col="blue", select = c("EGFDecayRate"), arrow.mul = myFact)
text(xLoc,0, labels = c(outText))
rm(myR2, myPval, VectorStats)
return(ccaData)
}
PrepDF <- function(df){
df <- na.omit(df)
df$V2 <- as.numeric(lapply(df$V2, function(x) x*-1))
colnames(df) <- c("PSF", "EGF_CONS","APOPEGF","DEATHPROB","MOVE","DIVLOCPROB","EGF_DIFFUSION_RATE","EGFDecayRate","rlambda","mean", "height")
return(df)
}
setwd("~/IdeaProjects/Epidermis_Project_Final/")
x <- rnorm(100, mean=0.02404)
test <- data.frame(X=x, Color=colorGradient(x, 0.02404))
plot(test$X, pch = 20, col=test$Color)
plot(test$X, pch = 20, col=test$Color)
plot(test, pch = 20, col=test$Color)
x <- rnorm(100, mean=0.02404, sd=0.5)
test <- data.frame(X=x, Color=colorGradient(x, 0.02404))
plot(test, pch = 20, col=test$Color)
qqplot(test)
qqplot(test$X)
qqplot(test$X, y=density(test$X))
qqplot(test$X, y=test$X)
qqplot(test$X, y=test$X, pch = 20, col=test$Color)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
#adjust <- sort(rnorm(100,mean=target,sd=0.5))
#out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- rbPal(100)[as.numeric(cut(x,breaks = 100))]
#out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
x <- rnorm(100, mean=0.02404, sd=0.5)
test <- data.frame(X=x, Color=colorGradient(x, 0.02404))
plot(test, pch = 20, col=test$Color)
qqplot(test$X, y=test$X, pch = 20, col=test$Color)
bit <- rnorm(100, mean=0.02404, sd=0.5)
test <- data.frame(X=bit, Color=colorGradient(bit, 0.02404))
plot(test, pch = 20, col=test$Color)
qqplot(test$X, y=test$X, pch = 20, col=test$Color)
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
#adjust <- sort(rnorm(100,mean=target,sd=0.5))
#out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- rbPal(100)[as.numeric(cut(x,breaks = 100))]
#out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
colorGradient <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
#adjust <- sort(rnorm(100,mean=target,sd=0.5))
#out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- rbPal(100)[as.numeric(cut(x,breaks = 100))]
#out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
bit <- rnorm(100, mean=0.02404, sd=0.5)
test <- data.frame(X=bit, Color=colorGradient(bit, 0.02404))
plot(test, pch = 20, col=test$Color)
qqplot(test$X, y=test$X, pch = 20, col=test$Color)
ApplyColor <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
#adjust <- sort(rnorm(100,mean=target,sd=0.5))
#out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- rbPal(100)[as.numeric(cut(x,breaks = 100))]
#out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
bit <- rnorm(100, mean=0.02404, sd=0.5)
test <- data.frame(X=bit, Color=ApplyColor(bit, 0.02404))
plot(test, pch = 20, col=test$Color)
qqplot(test$X, y=test$X, pch = 20, col=test$Color)
min(bit)
bit <- rnorm(100, mean=0.02404, sd=0.5)
test <- data.frame(Zip=bit, Color=ApplyColor(bit, 0.02404))
plot(test, pch = 20, col=test$Color)
qqplot(test$X, y=test$X, pch = 20, col=test$Color)
qqplot(test$Zip, y=test$Zip, pch = 20, col=test$Color)
ApplyColor <- function(x, target){
rbPal <- colorRampPalette(c('grey','blue','red','blue','grey'))
#adjust <- sort(rnorm(100,mean=target,sd=0.5))
#out <- rbPal(100)[as.numeric(cut(x,breaks = adjust))]
out <- rbPal(100)[as.numeric(cut(x,breaks = 100))]
#out <- sapply(out, function(x) if(is.na(x)){return("#B6B6C0")}else{return(x)})
return(out)
}
